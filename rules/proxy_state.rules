// Device needs to proxy events from groups, to filter duplicating
rule "{{ item.name }} proxy state item"
when
    Item {{ item.id }}_sw changed
then
    if ({{ item.id }}_sw_proxy.state != newState) {
        {{ item.id }}_sw_proxy.postUpdate(newState)
    }
end
rule "{{ item.name }} proxy state group"
when
    Item {{ item.id }}_sw_proxy received command
then
    if ({{ item.id }}_sw.state != receivedCommand) {
        {{ item.id }}_sw.sendCommand(receivedCommand)
    } else {
        logWarn("proxy", "Filter state for item {{ item.id }}")
        {%- if item.proxy_state_request %}
        // Send request for status - to ensure we are in sync
        val mq = getActions("mqtt","mqtt:broker:{{ item.config.mqtt_broker_id }}")
        mq.publishMQTT("zigbee2mqtt/{{ item.id }}/get","{\"state\":\"\"}")
        {%- endif %}
    }
end
